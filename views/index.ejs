<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>サーバーリスト</title>
  <link rel="stylesheet" href="/styles.css">
  
  <!-- SweetAlert2のCDNを追加 -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
  function minecraftColorToHtml(text) {
  const colorCodes = {
    '0': '#000000', // ブラック
    '1': '#0000AA', // ダークブルー
    '2': '#00AA00', // ダークグリーン
    '3': '#00AAAA', // ダークアクア
    '4': '#AA0000', // ダークレッド
    '5': '#AA00AA', // ダークピンク
    '6': '#FFAA00', // ゴールド
    '7': '#AAAAAA', // グレー
    '8': '#555555', // ダークグレー
    '9': '#5555FF', // ブルー
    'a': '#55FF55', // グリーン
    'b': '#55FFFF', // アクア
    'c': '#FF5555', // レッド
    'd': '#FF55FF', // ピンク
    'e': '#FFFF55', // イエロー
    'f': '#FFFFFF', // ホワイト
  };

  let result = '';
  let currentColor = 'f';  // デフォルト色は白
  let isBold = false;  // ボールドを管理
  let isItalic = false;  // イタリックを管理

  for (let i = 0; i < text.length; i++) {
    const char = text[i];

    // Minecraftカラーコード（§[0-9a-f]）を検出
    if (char === '§' && /[0-9a-frkoiulmn]/i.test(text[i + 1])) {
      const code = text[i + 1].toLowerCase();

      // 色リセット
      if (code === 'r') {
        currentColor = 'f';  // デフォルト色にリセット
        isBold = false;
        isItalic = false;
      } 
      // カラーコード
      else if (colorCodes[code]) {
        currentColor = code;  // 色を更新
      }
      // スタイルコード
      else if (code === 'l') {  // ボールド
        isBold = true;
      } else if (code === 'o') {  // イタリック
        isItalic = true;
      }
      
      i++;  // 次の文字はカラーコードなのでスキップ
    } else {
      // カラーコードを適用した文字を追加
      let style = `color: ${colorCodes[currentColor]};`;

      if (isBold) style += ' font-weight: bold;';
      if (isItalic) style += ' font-style: italic;';

      result += `<span style="${style}">${char}</span>`;
    }
  }

  return result;
}

  </script>
  
  <style>
    /* サーバーカードの背景色 */
    .server-card.tcp {
      background-color: #d4edda; /* 薄緑 */
    }

    .server-card.udp {
      background-color:rgb(173, 173, 173); /* 灰色 */
    }

    .server-card {
      padding: 15px;
      margin: 10px;
      border-radius: 10px;
      box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
      transition: background-color 0.3s ease;
    }
  
  <style>
    /* サーバーアドレスリンクのスタイリング */
    .connect-key a {
      color: #007bff;
      text-decoration: none;
      font-weight: bold;
      border-bottom: 2px solid transparent;
      transition: all 0.3s ease;
    }

    .connect-key a:hover {
      color: #0056b3;
      border-color: #0056b3;
    }

    .connect-key a:active {
      color: #004085;
    }
  </style>

  <script>
    // クリップボードにコピーする関数
    function copyToClipboard(text) {
      // テキストエリアを作成してコピーを実行
      const textarea = document.createElement('textarea');
      textarea.value = text;
      document.body.appendChild(textarea);
      textarea.select();
      document.execCommand('copy');
      document.body.removeChild(textarea);

      // SweetAlertでコピー成功の通知
      Swal.fire({
        title: '完了!',
        text: 'サーバーアドレスをコピーしました',
        icon: 'success',
        confirmButtonText: 'OK',
        background: '#f0f8ff',
        color: '#333',
        iconColor: '#28a745',
        confirmButtonColor: '#007bff'
      });
    }

  // サーバー名クリック時に詳細を表示する関数
  function showServerDetails(server) {
    // サーバーのMOTDにMinecraftカラーコードを適用
    const formattedMOTD = minecraftColorToHtml(server.mcinfo.motd);

    // サーバー作成日時と更新日時をフォーマット（例: yyyy/mm/dd）
    const createdAt = new Date(server.created_at);
    const updatedAt = new Date(server.updated_at);

    const createdAtFormatted = createdAt.toLocaleDateString('ja-JP');
    const updatedAtFormatted = updatedAt.toLocaleDateString('ja-JP');

    // SweetAlertでサーバーの詳細情報を表示
    Swal.fire({
      title: server.サーバー名,
      html: `
        <strong>バージョン:</strong> ${server.mcinfo.version} <br>
        <strong>プロトコル:</strong> ${server.protocol === 'tcp' ? 'TCP（Java版）' : 'UDP（統合版）'} <br>
        <strong>プレイヤー数:</strong> ${server.mcinfo.players} <br>
        <strong>サーバーアドレス:</strong> ${server.connect_key}.zcnc.me <br><br>
        <strong>作成日時:</strong> ${createdAtFormatted} <br>
        <strong>更新日時:</strong> ${updatedAtFormatted} <br><br>
        <span class="motd">${formattedMOTD}</span>  <!-- ここでカラーコードが適用されたMOTDを表示 -->
      `,
      icon: 'info',
      confirmButtonText: '閉じる',
      background: '#f0f8ff',
      color: '#333',
      iconColor: '#17a2b8',
      confirmButtonColor: '#007bff'
    });
  }
</script>

</head>
<body>
  <!-- ヘッダー -->
  <header class="header">
    <div class="logo-container">
      <img src="/logo.webp" alt="サーバーロゴ" class="logo">
    </div>
    <div class="header-title">
      <h1>FastServer Connect</h1>
      <p>サーバーリスト</p>
    </div>
  </header>

  <div class="container">
    <% if (typeof apiError !== 'undefined' && apiError) { %>
      <!-- API エラー通知 -->
      <div style="background-color: #fff3cd; border: 1px solid #ffeeba; border-radius: 5px; padding: 15px; margin-bottom: 20px; color: #856404;">
        <strong>⚠️ 注意:</strong> <%= errorMessage %>
      </div>
    <% } %>
    
    <!-- 絞り込みと並べ替えフォーム -->
    <div class="filter-sort">
      <select id="protocol-filter">
        <option value="">全てのプロトコル</option>
        <option value="tcp">TCP（Java版）</option>
        <option value="udp">UDP（統合版）</option>
      </select>
      <select id="sort-order">
        <option value="players-desc">プレイヤー数が多い順</option>
        <option value="players-asc">プレイヤー数が少ない順</option>
        <option value="name-asc">名前順（A→Z）</option>
        <option value="name-desc">名前順（Z→A）</option>
      </select>
    </div>

    <div class="server-list">
      <% servers.forEach(server => { %>
        <div class="server-card <%= server.protocol === 'tcp' ? 'tcp' : 'udp' %>" data-players="<%= server.mcinfo.players %>" data-name="<%= server.サーバー名 %>">
          <div class="server-icon">
            <img src="<%= server.mcinfo.favicon %>" alt="サーバーアイコン" class="favicon">
          </div>
          <div class="server-info">
            <div class="server-name-version">
              <h2 class="server-title" onclick="showServerDetails(<%= JSON.stringify(server) %>)">
                <%= server.サーバー名 %>
              </h2>
              <div class="version"><%= server.mcinfo.version %></div>
            </div>
            <div class="server-connect">
              <span class="connect-key">
                <span class="key-label">サーバーアドレス</span>
                <a href="javascript:void(0);" onclick="copyToClipboard('<%= server.connect_key %>.zcnc.me')">
                  <%= server.connect_key %>.zcnc.me
                </a>
              </span>
              <span class="player-count"><span class="count-label">プレイヤー数</span> <%= server.mcinfo.players %></span>
            </div>
            <div class="server-motd">
              <span class="motd"><%- minecraftColorToHtml(server.mcinfo.motd) %></span>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
  </div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // クリップボードにコピーする関数
    function copyToClipboard(text) {
      const textarea = document.createElement('textarea');
      textarea.value = text;
      document.body.appendChild(textarea);
      textarea.select();
      document.execCommand('copy');
      document.body.removeChild(textarea);

      Swal.fire({
        title: '完了!',
        text: 'サーバーアドレスをコピーしました',
        icon: 'success',
        confirmButtonText: 'OK',
        background: '#f0f8ff',
        color: '#333',
        iconColor: '#28a745',
        confirmButtonColor: '#007bff'
      });
    }

    // プレイヤー数で並べ替え機能の実装
    const protocolFilter = document.getElementById('protocol-filter');
    const sortOrder = document.getElementById('sort-order');
    const serverList = document.querySelector('.server-list');
    const serverCards = Array.from(document.querySelectorAll('.server-card'));

    // フィルタリング関数
    protocolFilter.addEventListener('change', filterServers);
    sortOrder.addEventListener('change', sortServers);

    function filterServers() {
      const selectedProtocol = protocolFilter.value;
      serverCards.forEach(card => {
        const protocol = card.classList.contains('tcp') ? 'tcp' : 'udp';
        if (selectedProtocol === '' || selectedProtocol === protocol) {
          card.style.display = 'flex';
        } else {
          card.style.display = 'none';
        }
      });
    }

    function sortServers() {
      const sortValue = sortOrder.value;
      let sortedServers = [...serverCards];
      
      if (sortValue === 'players-desc') {
        sortedServers.sort((a, b) => {
          return parseInt(b.getAttribute('data-players')) - parseInt(a.getAttribute('data-players'));
        });
      } else if (sortValue === 'players-asc') {
        sortedServers.sort((a, b) => {
          return parseInt(a.getAttribute('data-players')) - parseInt(b.getAttribute('data-players'));
        });
      } else if (sortValue === 'name-asc') {
        sortedServers.sort((a, b) => a.getAttribute('data-name').localeCompare(b.getAttribute('data-name')));
      } else if (sortValue === 'name-desc') {
        sortedServers.sort((a, b) => b.getAttribute('data-name').localeCompare(a.getAttribute('data-name')));
      }

      // サーバーカードを並べ替えた順番で再配置
      sortedServers.forEach(card => {
        serverList.appendChild(card);
      });
    }

    // 初期表示時にソートを適用
    sortServers();
  });
</script>

</body>

</html>
